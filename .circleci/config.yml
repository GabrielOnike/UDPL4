# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# commands:
   # Exercise - Rollback
  #  destroy_environment:
  #    steps:
  #      - run:
  #          name: Destroy environment
  #          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
  #          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
  #          when: on_fail
  #          command: |
  #            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}

# Define a job to be invoked later in a workflow.- rollback
jobs:
  create_and_deploy_frontend: 
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run: |
              aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name production-distro \
              --parameter-overrides PipelineID="udpl4"
        - run: aws s3 sync . s3://"udpl4" --delete      
# create_infrastructure: 
#       docker:
#         - image: amazon/aws-cli
#       steps:
#         - checkout
#         - run:
#             name: Create Cloudformation Stack
#             command: |
#               aws cloudformation deploy \
#                 --template-file template.yml \
#                 --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} \
#                 --region us-east-1                
  
  # configure_infrastructure: 
  #   docker:
  #     - image: python:3.7-alpine3.16
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #             # You can get this ID in the section where you registered the SSH Key
  #             fingerprints: ["f8:14:c3:56:7f:53:33:ae:f8:0d:e2:fc:83:8c:03:8f"] 
  #     - run:
  #         name: Install Ansible
  #         command: |
  #            apk add --update ansible
  #     - run:
  #         name: Run Playbook and Configure server
  #         command: |
  #            ansible-playbook -i inventory main.yml
  # Exercise: Smoke Testing
  # smoke_test:
  #   docker:
  #     - image: alpine:latest
  #   steps:
  #     - run:
  #         name: Test job
  #         # Fail the job intentionally to simulate an error.
  #         command:  return 1
  #     - destroy_environment 
  promote_to_production: 
        docker:
          - image: amazon/aws-cli
        steps:
          - checkout
          - run: |
                aws cloudformation deploy \
                --template-file cloudfront.yml \
                --stack-name cloudfront \
                --parameter-overrides PipelineID="udpl4"

# Sequential workflow
workflows:
  # Name the workflow
  myWorkflow:
    jobs:
      - create_and_deploy_frontend
      # - configure_infrastructure
      - promote_to_production:
          requires: 
            - create_and_deploy_frontend